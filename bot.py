from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F
from aiogram import types

import asyncio
import sys
import re

from config import ALLOWED_USERS, dp, bot, log, logging
from parser import fetch_news
from db_funcs import add_ticker, get_ticker
from db_funcs import add_company_custom, get_company_custom, del_company_custom, add_new_user, add_all_in_company_custom
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

running_tasks = [] # –ó–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
stop_event = asyncio.Event() # —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–¥–∞—á 
is_running = False # –ú–∞—Ä–∫–µ—Ä —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
COMPANIES_PER_PAGE = 6 # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª-–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –≤ –º–µ–Ω—é

 ### ---------------------------------------- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ ---------------------------------------- ###

async def restart_news_tasks(chat_id: int):
    global running_tasks, stop_event, is_running

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
    if is_running:
        stop_event.set()
        await asyncio.gather(*running_tasks, return_exceptions=True)
        log.info("–°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    stop_event = asyncio.Event()
    is_running = True

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    tickers = get_ticker()
    running_tasks = [
        asyncio.create_task(fetch_news(chat_id, main_url, ticker, stop_event))
        for _, ticker, main_url in tickers
    ]
    log.info("–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã.")

 ### ---------------------------------------- –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π ---------------------------------------- ###
 
async def show_companies(callback, chat_id, custom, page=0):
    if custom:
        companies = get_company_custom(chat_id)
        text = '–õ–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π'
    else:
        companies = get_ticker()
        text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π'

    start = page * COMPANIES_PER_PAGE
    end = start + COMPANIES_PER_PAGE
    current_companies = companies[start:end]

    keyboard = []
    if custom:
        for _, _, ticker in current_companies:
            keyboard.append([InlineKeyboardButton(text = f"‚ùå {ticker}", callback_data=f"del:{ticker}:{page}")])
        type = 'custom'
        
    else:
        companies = []
        received_companies = get_company_custom(callback.from_user.id)
        for _, _, ticker in received_companies:
            companies.append(ticker)
                
        for _, ticker, _ in current_companies:
                if ticker in companies:
                    keyboard.append([InlineKeyboardButton(text = f"‚úÖ {ticker}", callback_data="already")])
                else:
                    keyboard.append([InlineKeyboardButton(text = f"‚ûï {ticker}", callback_data=f"add:{ticker}:{page}")])
            
        type = 'list'
        keyboard.append([InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="add_all")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}:{type}"))
    if end < len(companies):
        nav_buttons.append(InlineKeyboardButton(text = "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"page:{page+1}:{type}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton(text = "‚ùé –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    # await bot.send_message(callback.message.chat.idat_id, f"üìã {text}:", reply_markup=markup)
    await bot.edit_message_text(text=f"üìã {text}:", 
                                chat_id=callback.message.chat.id, 
                                message_id=callback.message.message_id, 
                                reply_markup=markup,
                                parse_mode="Markdown")   

 ### ---------------------------------------- –í—ã–≤–æ–¥ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start  ---------------------------------------- ###

@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):

    add_new_user(message.chat.username, message.chat.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_news")],
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_news")],
        [InlineKeyboardButton(text="üëÅÔ∏è –ú–æ–π c–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π", callback_data="custom_list_companies")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π", callback_data="list_companies")]
        
    ])
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "*–í–∞–∂–Ω–æ: –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç/—É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥*\n\n"
        "‚ûï–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–æ –ø–æ —à–∞–±–ª–æ–Ω—É:\n"
        "–ö–æ–º–ø–∞–Ω–∏—è: #—Ç–∏–∫–µ—Ä - —Å—Å—ã–ª–∫–∞\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –∫–æ–º–ø–∞–Ω–∏—é, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ —É–∫–∞–∂–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:*",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '‚ûï –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π ---------------------------------------- ###

@dp.callback_query(F.data == "add_all")
async def delete_company(callback: CallbackQuery):
    chat_id = callback.from_user.id
    
    add_all_in_company_custom(chat_id)
    
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    chat_id = callback.from_user.id
    await show_companies(callback, chat_id, False, 0)

### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '‚ûï –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π ---------------------------------------- ###

@dp.callback_query(F.data.startswith("add:"))
async def delete_company(callback: CallbackQuery):
    _, ticker, page = callback.data.split(":")
    chat_id = callback.from_user.id
    
    add_company_custom(chat_id, ticker)
    
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    chat_id = callback.from_user.id
    await show_companies(callback, chat_id, False, int(page))

 ### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '‚ùå –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏' –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π ---------------------------------------- ###

@dp.callback_query(F.data.startswith("del:"))
async def delete_company(callback: CallbackQuery):
    _, ticker, page = callback.data.split(":")
    chat_id = callback.from_user.id
    
    del_company_custom(chat_id, ticker)
    
    # await callback.answer(f"–£–¥–∞–ª–µ–Ω–æ: {ticker}", show_alert=True)
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    chat_id = callback.from_user.id
    await show_companies(callback, chat_id, True, int(page))

 ### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ/–ù–∞–∑–∞–¥' –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π ---------------------------------------- ### 

@dp.callback_query(F.data.startswith("page:"))
async def change_page(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    type = callback.data.split(":")[2]
    
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    custom = False
    if type == 'custom':
        custom = True
        
    chat_id = callback.from_user.id
    await show_companies(callback, chat_id, custom, page)

 ### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é' –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π ---------------------------------------- ### 

@dp.callback_query(F.data == "close")
async def close_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="start_news")],
        [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_news")],
        [InlineKeyboardButton(text="üëÅÔ∏è –ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π", callback_data="custom_list_companies")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π", callback_data="list_companies")]
        
    ])
    await bot.edit_message_text(text="*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", 
                                chat_id=callback.message.chat.id, 
                                message_id=callback.message.message_id, 
                                reply_markup=keyboard,
                                parse_mode="Markdown")   
    
 ### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ---------------------------------------- ### 

@dp.callback_query(F.data == "start_news")
async def handle_start_news(callback: CallbackQuery):
    global running_tasks, stop_event, is_running
    chat_id = callback.message.chat.id

    print(">> –ó–∞–ø—É—Å–∫ –æ—Ç", chat_id)

    if is_running:
        log.warning("–ó–∞–¥–∞—á–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
        await callback.answer("–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!", show_alert=True)
        return

    stop_event.clear()
    is_running = True
    running_tasks = [
        asyncio.create_task(fetch_news(chat_id, main_url, ticker, stop_event))
        for _, ticker, main_url in get_ticker()
    ]
    await callback.message.answer("üöÄ –ó–∞–ø—É—Å—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π.")
    await callback.answer()

 ### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ---------------------------------------- ### 

@dp.callback_query(F.data == "stop_news")
async def handle_stop_news(callback: CallbackQuery):
    global running_tasks, stop_event, is_running

    if not is_running:
        await callback.answer("‚úÖ –¶–∏–∫–ª —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    stop_event.set()

    for task in running_tasks:
        task.cancel()
    await asyncio.gather(*running_tasks, return_exceptions=True)
    
    running_tasks = []
    is_running = False 

    await callback.message.answer("üõë –û—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    await callback.answer()

 ### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ---------------------------------------- ### 

@dp.callback_query(F.data == "list_companies")
async def handle_list_companies(callback: CallbackQuery):
    
    chat_id = callback.from_user.id
    await show_companies(callback, chat_id, False, page=0)
    
### ---------------------------------------- –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ---------------------------------------- ### 

@dp.callback_query(F.data == "custom_list_companies")
async def handle_custom_list_companies(callback: CallbackQuery):

    chat_id = callback.from_user.id
    await show_companies(callback, chat_id, True, page=0)
    
 ### ---------------------------------------- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –ª—é–±–æ–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç)  ---------------------------------------- ### 

@dp.message(F.text)
async def handle_company_message(message: types.Message):
    user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user.username not in ALLOWED_USERS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return
    pattern = re.compile( r'^–∫–æ–º–ø–∞–Ω–∏—è:\s+#([A-Z0-9]+)\s*-\s*(https?://[^\s]+)$', re.IGNORECASE)
    match = pattern.match(message.text.strip())
    chat_id = message.chat.id
    
    if match:
        ticker = match.group(1).upper()
        link = match.group(2)
        try:
            add_ticker(ticker, link)
            
        except:
            await message.answer(f"–¢–∏–∫–µ—Ä: {ticker} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ:\n–¢–∏–∫–µ—Ä: #{ticker}\n–°—Å—ã–ª–∫–∞: {link}")
        print(">> –ó–∞–ø—É—Å–∫ –æ—Ç", chat_id)
        await restart_news_tasks(chat_id)
        await message.answer("üîÑ –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü—Ä–∏–º–µ—Ä:\n–ö–æ–º–ø–∞–Ω–∏—è: #SVCB - https://example.com"
        )


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())