
### ------------------------------ 1Ô∏è‚É£ –ü–∞—Ä—Å–µ—Ä —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ ------------------------------ ###

# import os
# import requests
# from io import BytesIO
# import zipfile
# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.chrome.service import Service
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from webdriver_manager.chrome import ChromeDriverManager

# # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# page_url = 'https://e-disclosure.ru/portal/files.aspx?id=30052&type=4'  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π URL
# # xpath = '//*[@id="cont_wrap"]/div[2]/table/tbody/tr[2]/td[6]/a'
# save_folder = 'reports'

# # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# os.makedirs(save_folder, exist_ok=True)

# for num in range (2, 6):
#     # --- Selenium: –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É ---
#     options = webdriver.ChromeOptions()
#     # options.add_argument('--headless')
#     driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
#     driver.get(page_url)

#     wait = WebDriverWait(driver, 10)
#     link_element = wait.until(EC.presence_of_element_located((By.XPATH, f'//*[@id="cont_wrap"]/div[2]/table/tbody/tr[{num}]/td[6]/a')))
#     file_url = link_element.get_attribute('href')

#     from urllib.parse import urljoin
#     file_url = urljoin(page_url, file_url)
#     driver.quit()

#     # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP –≤ –ø–∞–º—è—Ç—å ---
#     response = requests.get(file_url)
#     zip_bytes = BytesIO(response.content)

#     # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF –∏–∑ –∞—Ä—Ö–∏–≤–∞ ---
#     with zipfile.ZipFile(zip_bytes) as zip_file:
#         pdf_name = next(name for name in zip_file.namelist() if name.lower().endswith('.pdf'))
#         pdf_bytes = zip_file.read(pdf_name)  # —á–∏—Ç–∞–µ–º –≤ –ø–∞–º—è—Ç—å

#         # –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
#         save_path = os.path.join(save_folder, os.path.basename(pdf_name))

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
#         with open(save_path, 'wb') as f:
#             f.write(pdf_bytes)

#     print(f"‚úÖ PDF-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")


### ------------------------------ 2Ô∏è‚É£ –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –¢–ê–°–° (economics) ------------------------------ ###

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

from config import options

import time
import hashlib

SEEN = set()
CHECK_INTERVAL = 5  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)


def fetch_news(driver):
    print('1')
    driver.get("https://tass.ru/ekonomika")
    wait = WebDriverWait(driver, 40)
    print('2')
    articles = driver.find_elements(By.XPATH, '//*[@id="infinite_listing"]/a[1]/div[1]/div/div[1]/span/text()')
    print('--->>>', articles)
    news = []

    for item in articles:
        try:
            title = item.text.strip()
            link = item.get_attribute("href")
            uid = hashlib.md5(link.encode()).hexdigest()
            news.append({"uid": uid, "title": title, "link": link})
        except Exception as e:
            continue

    return news

def main():
    print("üöÄ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–µ—Ä TASS (—á–µ—Ä–µ–∑ Selenium)")

    try:
        while True:
            news_items = fetch_news(driver)
            for news in news_items:
                if news["uid"] not in SEEN:
                    SEEN.add(news["uid"])
                    print(f"üÜï {news['title']}\n{news['link']}\n")
                    # send_to_bot(news['title'], news['link'])
            time.sleep(CHECK_INTERVAL)
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        driver.quit()

if __name__ == "__main__":
    main()
