
### ------------------------------ 1Ô∏è‚É£ –ü–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –¢–ê–°–° (economics) ------------------------------ ###

# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager

# from config import options

# import time
# import hashlib

# SEEN = set()
# CHECK_INTERVAL = 5  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# service = Service(ChromeDriverManager().install())
# driver = webdriver.Chrome(service=service, options=options)


# def fetch_news(driver):
#     print('1')
#     driver.get("https://tass.ru/ekonomika")
#     wait = WebDriverWait(driver, 40)
#     print('2')
#     articles = driver.find_elements(By.XPATH, '//*[@id="infinite_listing"]/a[1]/div[1]/div/div[1]/span/text()')
#     print('--->>>', articles)
#     news = []

#     for item in articles:
#         try:
#             title = item.text.strip()
#             link = item.get_attribute("href")
#             uid = hashlib.md5(link.encode()).hexdigest()
#             news.append({"uid": uid, "title": title, "link": link})
#         except Exception as e:
#             continue

#     return news

# def main():
#     print("üöÄ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–µ—Ä TASS (—á–µ—Ä–µ–∑ Selenium)")

#     try:
#         while True:
#             news_items = fetch_news(driver)
#             for news in news_items:
#                 if news["uid"] not in SEEN:
#                     SEEN.add(news["uid"])
#                     print(f"üÜï {news['title']}\n{news['link']}\n")
#                     # send_to_bot(news['title'], news['link'])
#             time.sleep(CHECK_INTERVAL)
#     except KeyboardInterrupt:
#         print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
#     finally:
#         driver.quit()

# if __name__ == "__main__":
#     main()

### ------------------------------ 2Ô∏è‚É£ –†–∞–±–æ—Ç–∞ —Å API –ú–æ—Å–±–∏—Ä–∂—ã (–æ–±—ä–µ–º –∑–∞ —Å—É—Ç–∫–∏) ------------------------------ ###

# import requests
# import pandas as pd
# from datetime import datetime, timedelta

# def get_security_volumes(ticker: str, board='TQBR', limit=10):
#     """
#     –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –ø–æ –±—É–º–∞–≥–µ —Å MOEX.
    
#     :param ticker: —Ç–∏–∫–µ—Ä –±—É–º–∞–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'SBER')
#     :param board: —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é TQBR ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ä—ã–Ω–æ–∫)
#     :param limit: —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –ø–æ–ª—É—á–∏—Ç—å
#     :return: pandas DataFrame —Å –¥–∞—Ç–∞–º–∏ –∏ –æ–±—ä–µ–º–∞–º–∏
#     """
    
#     from_date = (datetime.now() - timedelta(days=10)).strftime('%Y-%m-%d')
    
#     url = f"https://iss.moex.com/iss/history/engines/stock/markets/shares/boards/{board}/securities/{ticker}.json"
#     params = {
#         'iss.meta': 'off',
#         'from': from_date,  # –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
#         'start': 0,
#         'limit': limit
#     }

#     response = requests.get(url, params=params)
#     response.raise_for_status()
#     data = response.json()

#     # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'history'
#     columns = data['history']['columns']
#     rows = data['history']['data']

#     df = pd.DataFrame(rows, columns=columns)
#     print(df)
#     df = df[['TRADEDATE', 'VOLUME', 'TRENDCLSPR']]
#     return df

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# df = get_security_volumes('SBER', limit=5)
# print(df)

### ------------------------------ 3Ô∏è‚É£ –†–∞–±–æ—Ç–∞ —Å API –ú–æ—Å–±–∏—Ä–∂—ã (—Å—Ç–∞–∫–∞–Ω)) ------------------------------ ###

import requests

def get_orderbook(ticker: str, depth: int = 10):
    base_url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities"
    url = f"{base_url}/{ticker}/orderbook.json?depth={depth}"
    
    try:
        response = requests.get(url)
        
        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
        print(f"–û—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {response.text[:300]}")
        
        response.raise_for_status()
        data = response.json()

        bids = data['orderbook']['bids']
        offers = data['orderbook']['offers']

        return {
            'ticker': ticker,
            'bids': bids,
            'offers': offers
        }
    except Exception as e:
        return {"error": str(e)}


